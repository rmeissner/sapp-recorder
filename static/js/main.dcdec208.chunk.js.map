{"version":3,"sources":["GlobalStyle.ts","logic/simulator.ts","logic/messaging.ts","components/Simulator.tsx","components/Configuration.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","SimulatorEngine","nodeUrl","provider","sendAsync","options","db","memdown","db_path","fork","gasLimit","gasPrice","this","ganache","promisify","send","bind","method","params","a","jsonrpc","result","from","tx","account","FrameCommunicator","frame","engine","appUrl","info","handlers","requestId","console","log","JSON","stringify","communicator","onTransactionProposal","txs","then","resp","sendResponse","safeTxHash","err","sendError","txServiceUrl","payload","call","error","message","source","window","includes","origin","handleMessage","data","id","frameWindow","current","contentWindow","sdkVersion","getSDKVersion","msg","MessageFormatter","makeResponse","postMessage","makeErrorResponse","defaultWindow","eventWindow","callback","ev","onMessage","addEventListener","removeEventListener","styles","createStyles","appContainer","border","frameborder","width","height","withStyles","classes","node","resetNode","useSafeAppsSDK","safe","sdk","useState","nextTxs","setNextTxs","pendingTxs","setPendingTxs","appFrame","useRef","isSafeApp","safeAddress","useMemo","handleSubmit","useCallback","length","Error","sendTransaction","to","value","React","useEffect","concat","undefined","network","connect","unlock","init","size","color","onClick","title","ref","src","className","KEY_LOCAL_STORAGE_NODE_KEY","KEY_LOCAL_STORAGE_ACCOUNT_KEY","KEY_LOCAL_STORAGE_APP_KEY","onConfigSet","localStorage","getItem","setNode","setAccount","setAppUrl","handleConfig","setItem","TextField","onChange","e","target","label","config","setConfig","ReactDOM","render","StrictMode","theme","document","getElementById"],"mappings":"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","file":"static/js/main.dcdec208.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2';\nimport avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2';\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%\n    }\n\n    body {\n       height: 100%;\n       margin: 0px;\n       padding: 0px;\n    }\n\n    #root {\n        height: 100%;\n        padding-right: 0.5rem;\n    }\n\n    .MuiFormControl-root,\n    .MuiInputBase-root {\n        width: 100% !important;\n    }\n\n    @font-face {\n        font-family: 'Averta';\n        src: local('Averta'), local('Averta Bold'),\n        url(${avertaFont}) format('woff2'),\n        url(${avertaBoldFont}) format('woff');\n    }\n`;\n\nexport default GlobalStyle;\n","import ganache, { JsonRpcPayload, JsonRpcResponse } from \"ganache-core\"\nimport memdown from \"memdown\"\nimport promisify from \"util.promisify\"\n    \nexport interface Transaction {\n    to: string,\n    value: string,\n    data: string\n}\n\nexport class SimulatorEngine {\n\n    provider: ganache.Provider\n    sendAsync: (arg: JsonRpcPayload) => Promise<JsonRpcResponse | undefined>\n\n    constructor(nodeUrl: string) {\n        const db: any = memdown()\n        const options: any = { db, db_path: \"/\", fork: nodeUrl, gasLimit: 100000000, gasPrice: 0 }\n        this.provider = ganache.provider(options)\n        this.sendAsync = promisify(this.provider.send.bind(this.provider))\n    }\n    \n    async send (method: string, params: any[]) {\n        return (await this.sendAsync({ jsonrpc: \"2.0\", method, params }))?.result\n    }\n    \n    async sendTransaction (from: string, tx: Transaction) {\n        return await this.send(\"eth_sendTransaction\", [{...tx, from, gasPrice: 0, gasLimit: 10000000}])\n    }\n    \n    async unlock (account: string) {\n        await this.send(\"evm_unlockUnknownAccount\", [account])\n    }\n}","import {\n    getSDKVersion,\n    SDKMessageEvent,\n    MethodToResponse,\n    Methods,\n    SafeInfo,\n    MessageFormatter,\n    RequestId,\n    Transaction,\n    RPCPayload\n} from '@gnosis.pm/safe-apps-sdk'\nimport { SimulatorEngine } from './simulator'\n\nexport interface MessageHandlers {\n    onTransactionProposal: (transactions: Transaction[], requestId: RequestId) => Promise<string>\n}\n\nexport class FrameCommunicator {\n    constructor(\n        readonly frame: React.RefObject<HTMLIFrameElement>,\n        readonly engine: SimulatorEngine,\n        readonly appUrl: string,\n        readonly info: SafeInfo,\n        readonly handlers: MessageHandlers\n    ) { }\n\n    handleMessage(\n        method: Methods,\n        params: unknown,\n        requestId: RequestId\n    ) {\n        console.log(`Received ${method} (${requestId}) with ${JSON.stringify(params)}`)\n        if (!method) {\n            console.error('ThirdPartyApp: A message was received without message id.')\n            return\n        }\n\n        switch (method) {\n            case 'sendTransactions': {\n                if (params) {\n                    const communicator = this\n                    this.handlers.onTransactionProposal(\n                        // @ts-expect-error explore ways to fix this\n                        params.txs as Transaction[],\n                        requestId,\n                    ).then(\n                        (resp: any) => {\n                            communicator.sendResponse({ safeTxHash: resp}, requestId)\n                        }, (err: any) => {\n                            communicator.sendError(err, requestId)\n                        }\n                    )\n                }\n                break\n            }\n\n            case 'getEnvInfo': {\n                this.sendResponse({ txServiceUrl: \"\" }, requestId)\n                break\n            }\n\n            case 'getSafeInfo': {\n                this.sendResponse(this.info, requestId)\n                break\n            }\n\n            case 'rpcCall': {\n                const payload = params as RPCPayload\n                const communicator = this\n                try {\n                    this.engine.send(payload.call, payload.params).then(\n                        (resp: any) => {\n                            communicator.sendResponse(resp, requestId)\n                        }, (err: any) => {\n                            communicator.sendError(err, requestId)\n                        }\n                    )\n                } catch (err) {\n                    communicator.sendError(err, requestId)\n                }\n                break\n            }\n\n            default: {\n                console.error(`ThirdPartyApp: A message was received with an unknown method ${method}.`)\n                this.sendError(`Unknown method ${method}.`, requestId)\n                break\n            }\n        }\n    }\n\n    onMessage(message: SDKMessageEvent) {\n        if (message.source === window) {\n            return\n        }\n        if (!this.appUrl.includes(message.origin)) {\n            console.error(`ThirdPartyApp: A message was received from an unknown origin ${message.origin}`)\n            return\n        }\n        this.handleMessage(message.data.method, message.data.params, message.data.id)\n    }\n\n    sendResponse(\n        data: MethodToResponse[Methods],\n        requestId: RequestId\n    ) {\n        const frameWindow = this.frame.current?.contentWindow\n        if (!frameWindow) return\n        const sdkVersion = getSDKVersion()\n        const msg = MessageFormatter.makeResponse(requestId, data, sdkVersion)\n        frameWindow.postMessage(msg, this.appUrl)\n    }\n\n    sendError(\n        error: string,\n        requestId: RequestId\n    ) {\n        const frameWindow = this.frame.current?.contentWindow\n        if (!frameWindow) return\n        const sdkVersion = getSDKVersion()\n        const msg = MessageFormatter.makeErrorResponse(requestId, error, sdkVersion)\n        frameWindow.postMessage(msg, this.appUrl)\n    }\n\n    connect(defaultWindow?: Window): (() => void) | undefined {\n        const eventWindow = defaultWindow || this.frame.current?.contentWindow\n        if (!eventWindow) return\n        const callback = (ev: MessageEvent<any>) => { this.onMessage(ev) }\n        eventWindow.addEventListener('message', callback)\n        return () => {\n            eventWindow.removeEventListener('message', callback)\n        }\n    }\n}","import React, { useCallback, useEffect, useState, useRef, useMemo } from 'react';\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core';\nimport { Button } from '@gnosis.pm/safe-react-components';\nimport { SimulatorEngine, Transaction } from '../logic/simulator';\nimport { FrameCommunicator } from '../logic/messaging';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\n\nconst styles = createStyles({\n    appContainer: {\n        border: 0,\n        frameborder: 0,\n        width: '100%',\n        height: '100%'\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    node: string,\n    account: string,\n    appUrl: string,\n    resetNode: () => void\n}\n\nconst Simulator: React.FC<Props> = ({ classes, node, account, appUrl, resetNode }) => {\n    const { safe, sdk } = useSafeAppsSDK() \n    const [nextTxs, setNextTxs] = useState<Transaction[] | undefined>([])\n    const [pendingTxs, setPendingTxs] = useState<Transaction[]>([])\n    const appFrame = useRef<HTMLIFrameElement>(null)\n\n    const isSafeApp = safe.safeAddress !== ''\n\n    const engine = useMemo(() => {\n        return new SimulatorEngine(node)\n    }, [node])\n\n    const handleSubmit = useCallback(async () => {\n        if (isSafeApp) {\n            await sdk.txs.send({ txs: pendingTxs })\n        } else {\n            console.log(\"Recorded Transactions:\", pendingTxs)\n        }\n    }, [safe, pendingTxs]);\n\n    const onTransactionProposal = useCallback(async (txs: Transaction[]) => {\n        if (txs.length > 1)\n            throw Error(\"Currently multiple txs are not supported\")\n        const tx = txs[0]\n        const result = await engine.sendTransaction(account, { to: tx.to, value: tx.value, data: tx.data })\n        setNextTxs(txs)\n        return result\n    }, [engine, account, setNextTxs]);\n\n    React.useEffect(() => {\n        if (!nextTxs) return\n        setPendingTxs(pendingTxs.concat(nextTxs))\n        setNextTxs(undefined)\n    }, [nextTxs, setNextTxs, pendingTxs, setPendingTxs])\n\n    const communicator: FrameCommunicator = useMemo(() => {\n        return new FrameCommunicator(appFrame, engine, appUrl, isSafeApp ? safe : {\n            safeAddress: account,\n            network: \"MAINNET\"\n        }, {\n            onTransactionProposal\n        })\n    }, [appFrame, account, appUrl, onTransactionProposal])\n\n    useEffect(() => {\n        return communicator.connect(window)\n    }, [communicator])\n\n    useEffect(() => {\n        const init = async () => {\n            await engine.unlock(account)\n        }\n        init()\n    }, [engine, account])\n\n    return (<>\n        <>\n            &nbsp;Transactions in queue {pendingTxs.length}\n            <Button size=\"md\" color=\"primary\" onClick={handleSubmit}>{ isSafeApp ? \"Submit\" : \"Log\" }</Button>\n            <Button size=\"md\" color=\"primary\" onClick={resetNode}>Reset</Button>\n        </>\n        <iframe title=\"App\" ref={appFrame} src={appUrl} className={classes.appContainer} />\n    </>);\n};\n\nexport default withStyles(styles)(Simulator)\n","import React, { useCallback, useState } from 'react';\nimport { createStyles, TextField, withStyles, WithStyles } from '@material-ui/core';\nimport { Button } from '@gnosis.pm/safe-react-components';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\n\nconst styles = createStyles({\n    appContainer: {\n        border: 0,\n        frameborder: 0,\n        width: '100%',\n        height: '100%'\n    }\n})\n\nexport interface Config {\n    account: string,\n    node: string,\n    appUrl: string\n}\ninterface Props extends WithStyles<typeof styles> {\n    onConfigSet: (config: Config | undefined) => void\n}\n\nconst KEY_LOCAL_STORAGE_NODE_KEY = \"sapp_browser_config_node\"\nconst KEY_LOCAL_STORAGE_ACCOUNT_KEY = \"sapp_browser_config_account\"\nconst KEY_LOCAL_STORAGE_APP_KEY = \"sapp_browser_config_app\"\n\nconst Configuration: React.FC<Props> = ({ onConfigSet }) => {\n    const { safe } = useSafeAppsSDK() \n    console.log({safe})\n    const [node, setNode] = useState(localStorage.getItem(KEY_LOCAL_STORAGE_NODE_KEY) || \"\")\n    const [account, setAccount] = useState(safe.safeAddress || localStorage.getItem(KEY_LOCAL_STORAGE_ACCOUNT_KEY) || \"\")\n    const [appUrl, setAppUrl] = useState(localStorage.getItem(KEY_LOCAL_STORAGE_APP_KEY) || \"\")\n    const handleConfig = useCallback(async (node: string, account: string, appUrl: string) => {\n        localStorage.setItem(KEY_LOCAL_STORAGE_NODE_KEY, node)\n        localStorage.setItem(KEY_LOCAL_STORAGE_ACCOUNT_KEY, account)\n        localStorage.setItem(KEY_LOCAL_STORAGE_APP_KEY, appUrl)\n        if (node && account && appUrl) {\n            onConfigSet({ node, account, appUrl })\n        } else {\n            onConfigSet(undefined)\n        }\n    }, [onConfigSet])\n    return (<>\n        <TextField value={node} onChange={(e) => setNode(e.target.value) } label=\"Node url\" />\n        <TextField value={account} onChange={(e) => setAccount(e.target.value) } label=\"Account address\" />\n        <TextField value={appUrl} onChange={(e) => setAppUrl(e.target.value) } label=\"App url\" />\n        <Button size=\"md\" color=\"primary\" onClick={() => handleConfig(node, account, appUrl) }>Start</Button>\n    </>);\n};\n\nexport default withStyles(styles)(Configuration)","import React, { useState } from 'react';\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core';\nimport Simulator from './components/Simulator';\nimport Configuration, { Config } from './components/Configuration';\n\nconst styles = createStyles({\n  appContainer: {\n    border: 0,\n    frameborder: 0,\n    width: '100%',\n    height: '100%'\n  }\n})\n\ninterface Props extends WithStyles<typeof styles> { }\n\nconst App: React.FC<Props> = () => {\n  const [config, setConfig] = useState<Config|undefined>(undefined)\n  if (!config) return (<Configuration onConfigSet={setConfig} />)\n  return (<Simulator account={config.account} node={config.node} appUrl={config.appUrl} resetNode={() => { setConfig(undefined) }} />);\n};\n\nexport default withStyles(styles)(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from '@gnosis.pm/safe-react-components';\nimport SafeProvider from '@gnosis.pm/safe-apps-react-sdk';\n\nimport GlobalStyle from './GlobalStyle';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <SafeProvider>\n        <App />\n      </SafeProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}